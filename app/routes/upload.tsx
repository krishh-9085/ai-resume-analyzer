import {type FormEvent, useState} from 'react'import {Navbar} from "~/components/Navbar";import FileUploader from "~/components/FileUploader";import Iridescence from "../../Backgrounds/Iridescence/Iridescence"; // Import the Iridescence componentimport {usePuterStore} from "~/lib/puter";import {useNavigate} from "react-router";import {convertPdfToImage} from "~/lib/pdf2img";import {generateUUID} from "~/lib/utils";import {prepareInstructions, AIResponseFormat} from "../../constants";const Upload = () => {    const { auth, isLoading, fs, ai, kv } = usePuterStore();    const navigate = useNavigate();    const [isProcessing, setIsProcessing] = useState(false);    const [statusText, setStatusText] = useState('');    const [file, setFile] = useState<File | null>(null);    const handleFileSelect = (file: File | null) => {        setFile(file)    }    const handleAnalyze = async ({ companyName, jobTitle, jobDescription, file }: { companyName: string, jobTitle: string, jobDescription: string, file: File  }) => {        setIsProcessing(true);        setStatusText('Uploading the file...');        const uploadedFile = await fs.upload([file]);        if(!uploadedFile) return setStatusText('Error: Failed to upload file');        setStatusText('Converting to image...');        const imageFile = await convertPdfToImage(file);        if(!imageFile.file) return setStatusText('Error: Failed to convert PDF to image');        setStatusText('Uploading the image...');        const uploadedImage = await fs.upload([imageFile.file]);        if(!uploadedImage) return setStatusText('Error: Failed to upload image');        setStatusText('Preparing data...');        const uuid = generateUUID();        const data = {            id: uuid,            resumePath: uploadedFile.path,            imagePath: uploadedImage.path,            companyName, jobTitle, jobDescription,            feedback: '',        }        await kv.set(`resume:${uuid}`, JSON.stringify(data));        setStatusText('Analyzing...');        const feedback = await ai.feedback(            uploadedFile.path,            prepareInstructions({AIResponseFormat, jobTitle, jobDescription })        )        if (!feedback) return setStatusText('Error: Failed to analyze resume');        const feedbackText = typeof feedback.message.content === 'string'            ? feedback.message.content            : feedback.message.content[0].text;        data.feedback = JSON.parse(feedbackText);        await kv.set(`resume:${uuid}`, JSON.stringify(data));        setStatusText('Analysis complete, redirecting...');        console.log(data);        navigate(`/resume/${uuid}`);    }    const handleSubmit = (e: FormEvent<HTMLFormElement>) => {        e.preventDefault();        const form = e.currentTarget.closest('form');        if(!form) return;        const formData = new FormData(form);        const companyName = formData.get('company-name') as string;        const jobTitle = formData.get('job-title') as string;        const jobDescription = formData.get('job-description') as string;        if(!file) return;        handleAnalyze({ companyName, jobTitle, jobDescription, file });    }    return (        <main className="relative min-h-screen overflow-hidden">            {/* Iridescence Background */}            <div className="absolute inset-0">                <Iridescence                    color={[0.5, 0.6, 0.8]} // Slightly pink-tinted iridescence                    mouseReact={true}                    amplitude={0.15}                    speed={0.8}                />            </div>            {/* Content overlay */}            <div className="relative z-10">                <Navbar />                <section className="main-section">                    <div className="page-heading py-12 sm:py-16 px-4">                        <h1 className="text-white text-shadow-lg">Smart feedback for your dream job</h1>                        {isProcessing ? (                            <>                                <h2 className="text-white/90 text-shadow">{statusText}</h2>                                <div className="flex justify-center mt-8">                                    <img src="/images/resume-scan.gif" className="w-full max-w-md rounded-2xl shadow-2xl" />                                </div>                            </>                        ) : (                            <h2 className="text-white/80 text-shadow">Drop your resume for an ATS score and improvement tips</h2>                        )}                        {!isProcessing && (                            <div                                className="mt-8 backdrop-blur-md bg-black/8 rounded-3xl p-8 border border-white/20 shadow-2xl max-w-4xl mx-auto w-full">                                <form id="upload-form" onSubmit={handleSubmit} className="flex flex-col gap-6">                                    <div className="form-div">                                        <label htmlFor="company-name" className="text-black font-medium mb-2 block">                                            Company Name                                        </label>                                        <input                                            type="text"                                            name="company-name"                                            placeholder="Company Name"                                            id="company-name"                                            className="w-full p-4 rounded-xl bg-white/10 backdrop-blur-sm border border-white/20  text-black placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all"                                        />                                    </div>                                    <div className="form-div">                                        <label htmlFor="job-title" className="text-black font-medium mb-2 block">                                            Job Title                                        </label>                                        <input                                            type="text"                                            name="job-title"                                            placeholder="Job Title"                                            id="job-title"                                            className="w-full p-4 rounded-xl bg-white/10 backdrop-blur-sm border border-white/20 text-black placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all"                                        />                                    </div>                                    <div className="form-div">                                        <label htmlFor="job-description" className="text-black font-medium mb-2 block ">                                            Job Description                                        </label>                                        <textarea                                            rows={5}                                            name="job-description"                                            placeholder="Job Description"                                            id="job-description"                                            className="w-full p-4 rounded-xl bg-white/10 backdrop-blur-sm border border-white/20 text-black placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all resize-vertical"                                        />                                    </div>                                    <div className="form-div">                                        <label htmlFor="uploader" className="text-black font-medium mb-2 block">                                            Upload Resume                                        </label>                                        <FileUploader onFileSelect={handleFileSelect}/>                                    </div>                                    <button                                        className="primary-button bg-white/20 hover:bg-white/30 text-white font-semibold py-4 px-8 rounded-2xl backdrop-blur-sm border border-white/30 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-[1.02] active:scale-95"                                        type="submit"                                    >                                        Analyze Resume                                    </button>                                </form>                            </div>                        )}                    </div>                </section>            </div>        </main>    )}// @ts-ignoreexport default Upload